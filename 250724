# TIL

## 1. continue ←” if 조건 만족하면 무시하고(continue) 안 만족하는 거만 다룰거야.”

- `for` 또는 `while` 반복문 내에서 사용되는 제어
- 해당 키워드를 만나게 되면 이번 반복은 무시하고 다음 반복을 수행
    
    ```python
      for i in range(10):
          if i % 2 == 0:
              continue
          print(i)                  # 출력: 1 3 5 7 9
    ```
    
    `continue`는 현재 진행 중인 반복(iteration)을 즉시 중단하고, 다음 반복으로 넘어가도록 지시하는 역할을 한다.
    
     즉, `continue` 키워드를 만나면 그 아래에 있는 코드들은 실행되지 않고, 반복문의 처음으로 돌아가 다음 요소를 처리하거나 조건식을 다시 평가하게 된다.
    
- `continue`의 사용법 및 동작 방식
    1. **반복문 내에서 사용**: `continue`는 반드시 `for` 또는 `while` 루프 내에 있어야 한다.
    2. **조건부 실행**: 일반적으로 `if` 문과 함께 사용되어 특정 조건이 충족될 때만 현재 반복을 건너뛰도록 만든다.
    3. **코드 흐름**:
        - 반복문이 실행됩니다.
        - 어떤 조건(예: `if 조건식:`)이 참(True)이 됩니다.
        - `continue` 문이 실행됩니다.
        - 현재 반복의 `continue` 아래에 있는 모든 코드는 무시됩니다.
        - 반복문의 다음 반복이 시작됩니다.
            - `for` 루프의 경우, 다음 요소를 가져와서 처리합니다.
            - `while` 루프의 경우, 조건식을 다시 평가합니다.
    
    ### `continue`와 `break`의 차이점
    
    `continue`와 `break`는 모두 반복문의 흐름을 제어하지만, 그 역할은 완전히 다르다.
    
    - **`continue`**: **현재 반복만 중단**하고 다음 반복으로 넘어갑니다. 반복문 자체는 계속 실행된다.
    - **`break`**: **반복문 자체를 완전히 종료**합니다. `break`가 실행되면 반복문은 더 이상 실행되지 않고, 반복문 바로 다음 코드가 실행된다.
    
    ### continue 사용 예시 정리
    
    - continue 사용 예시 정리
    1. 홀수만 출력하기
        - 1부터 10까지의 숫자 중에서 짝수는 건너뛰고 홀수만 출력하는 예시입니다.
        - 코드:
            
            ```python
            for number in range(1, 11):
                # 숫자가 짝수일 경우 (2로 나눈 나머지가 0)
                if number % 2 == 0:
                    continue  # 짝수일 경우 아래 print()를 건너뛰고 다음 반복으로 넘어갑니다.
            
                # 홀수인 경우에만 실행됩니다.
                print(number)
            
            ```
            
        - 출력 결과:
            
            ```
            1
            3
            5
            7
            9
            
            ```
            
        - 설명:
            
            number가 2, 4, 6, 8, 10일 때는 if 조건이 참이 되어 continue가 실행되고,
            
            `print(number)` 코드는 무시됩니다.
            
    2. 특정 문자 건너뛰기
        - 문자열에서 특정 문자는 제외하고 출력하고 싶을 때 사용할 수 있습니다.
        - 코드:
            
            ```python
            sentence = "Python is awesome"
            vowels = "aeiou"
            
            for char in sentence:
                # 현재 문자가 모음(vowel)에 포함되면
                if char.lower() in vowels:
                    continue  # 모음이면 건너뛰고 다음 문자로 넘어갑니다.
            
                # 모음이 아닌 경우에만 실행됩니다.
                print(char, end='')
            
            ```
            
        - 출력 결과:
            
            ```
            Pythn s wsm
            
            ```
            
        - 설명:
            
            모음(a, e, i, o, u)이 나올 때마다 continue가 실행되어 해당 문자를 건너뜁니다.
            
    3. 유효성 검사
        - while 반복문에서 사용자 입력의 유효성을 검사할 때 continue를 사용하여
            
            잘못된 입력이 들어오면 다시 입력을 요청하는 로직을 만들 수 있습니다.
            
        - 코드:
            
            ```python
            while True:
                user_input = input("10 이상의 숫자를 입력하세요 (종료하려면 'exit' 입력): ")
            
                if user_input.lower() == 'exit':
                    break  # 'exit'를 입력하면 반복문을 완전히 종료합니다.
            
                try:
                    number = int(user_input)
                except ValueError:
                    print("유효한 숫자를 입력해주세요.")
                    continue  # 숫자가 아니면 다시 입력받기 위해 현재 반복을 건너뜁니다.
            
                if number < 10:
                    print("10보다 작은 숫자는 처리할 수 없습니다.")
                    continue  # 10보다 작으면 다시 입력받기 위해 건너뜁니다.
            
                print(f"입력된 숫자는 {number}입니다. 작업을 계속합니다.")
                # 실제 프로그램에서는 여기에서 원하는 로직을 수행합니다.
            
            ```
            
        - 설명:
            
            입력값이 숫자가 아니거나 10 미만일 경우 continue를 사용해
            
            현재 반복을 건너뛰고 다시 입력을 받을 수 있습니다.
            

---

## 2. pass ← 에러가 안 나도록 일단 자리만 채워넣는 느낌

- 역할
    - 아무것도 하지 않고 그냥 넘어간다.
    - 코드 블록에 아무런 내용이 없음을 나타내는 "자리표시자(placeholder)" 역할을 한다.
- 주요 사용처
    - 파이썬 문법상 코드 블록이 반드시 필요하지만, 아직 작성할 내용이 없을 때 사용된다.
    - 주로 다음과 같은 경우에 사용된다:
        - 함수 정의 (`def`)
        - 클래스 정의 (`class`)
        - 조건문 (`if`, `elif`, `else`)
        - 반복문 (`for`, `while`)
- 동작 방식
    - `pass`를 만나면, 파이썬은 그냥 다음 줄로 넘어간다.
    - `pass`는 아무런 동작도 수행하지 않으므로, 프로그램의 실행 흐름에 영향을 주지 않는다.

```python
for i in rental_list:
    if i in list_of_book:
        pass
    else : 
        print(f'{i}은/는 보유하고 있지 않습니다.')
        break

print('모든 도서가 대여 가능한 상태입니다.')
```

### `pass`의 주요 역할과 사용 예시

- pass 사용 예시 정리
1. 함수 정의 (def)
    - 함수를 먼저 정의해 놓고, 나중에 구현할 계획일 때 사용합니다.
    - 예시 코드:
        
        ```python
        def my_function():
            # TODO: 여기에 나중에 코드를 작성할 예정
            pass
        
        def another_function():
            print("이 함수는 이미 구현되었습니다.")
        
        ```
        
    - 설명: 위 코드에서 my_function은 아직 구현되지 않았지만, pass 덕분에 문법 오류 없이 프로그램이 실행됩니다.
2. 클래스 정의 (class)
    - 클래스의 기본 구조만 잡아놓고, 메서드나 속성을 나중에 추가할 때 유용합니다.
    - 예시 코드:
        
        ```python
        class MyClass:
            # 이 클래스는 나중에 기능을 추가할 예정
            pass
        
        class MySubClass(MyClass):
            # 상속받은 클래스를 만들고, pass로 일단 비워둘 수 있습니다.
            pass
        
        ```
        
    - 설명: 이렇게 하면 클래스의 존재만 먼저 선언할 수 있습니다.
3. 조건문 (if, elif, else)
    - 특정 조건에 대해 아무런 동작도 하지 않고 넘어갈 때 사용됩니다.
    - 예시: 특정 조건에서는 별다른 처리가 필요 없고, 나머지 경우에만 코드를 실행하고 싶을 때 유용합니다.
    - 예시 코드:
        
        ```python
        score = 85
        
        if score >= 90:
            # A학점에 대한 특별한 동작은 아직 정하지 않음
            pass
        else:
            print("A학점은 아닙니다.")
        
        ```
        
    - 출력 결과:
        
        ```
        A학점은 아닙니다.
        
        ```
        
    - 설명: pass가 없다면, if 블록이 비어 있어서 문법 오류가 발생합니다.
4. 반복문 (for, while)
    - 반복문 내에서 특정 조건에 해당하는 경우 아무것도 하지 않고 다음 반복으로 넘어가고 싶을 때 사용됩니다.
    - 예시 코드:
        
        ```python
        for item in [1, 2, 3, 4, 5]:
            if item == 3:
                # 3일 때는 아무것도 하지 않고 넘어갑니다.
                pass
            else:
                print(item)
        
        ```
        
    - 출력 결과:
        
        ```
        1
        2
        4
        5
        
        ```
        
    - 설명: item이 3일 때 pass가 실행되지만 아무런 동작도 하지 않으므로 else 블록은 실행되지 않습니다.
        
        continue와 달리 for 반복문 자체는 계속 진행됩니다.
        
        pass는 단지 코드 블록을 채워주는 역할만 합니다.
        

---

### continue vs pass 차이점 요약

| 차이점 | `continue` | `pass` |
| --- | --- | --- |
| **목적** | 반복 건너뛰기 | 코드 블록 채우기 (자리표시자) |
| **효과** | 현재 반복을 중단하고 다음 반복으로 이동 | 아무것도 하지 않음 |
| **주 사용처** | `for`, `while` 반복문 내부 | `def`, `class`, `if`, `for`, `while` 등 |
| **실행 흐름** | 반복문의 시작 지점으로 돌아감 | 코드의 다음 줄로 이동 |

> 간단히 말해,
> 
> 
> `continue`는 **"이번 반복은 그만하고 다음 반복으로 넘어가!"**
> 
> `pass`는 **"여기는 일단 비워둘 테니 그냥 지나가!"**
> 

---

## 3. zip ← 행들을 여러 개 받으면, 열로다가 묶음

- zip() 함수란?
    - 파이썬의 zip() 함수는 여러 개의 이터러블(iterable) 객체들을 묶어서 새로운 이터레이터(iterator)를 만드는 역할을 합니다.
    - 여기서 '이터러블'은 리스트, 튜플, 문자열 등 반복할 수 있는 데이터 타입들을 말합니다.
    - zip() 함수는 각 이터러블에서 동일한 인덱스에 있는 요소들을 짝지어 튜플 형태로 반환합니다.
    - 예를 들어, 두 개의 리스트 [1, 2, 3]과 ['a', 'b', 'c']를 zip()으로 묶으면 (1, 'a'), (2, 'b'), (3, 'c')와 같은 튜플들이 차례대로 생성됩니다.
- 작동 방식
    - zip()은 전달된 이터러블 중에서 가장 짧은 것의 길이에 맞춰 동작합니다.
    - 만약 길이가 다른 이터러블들을 묶으면, 가장 짧은 이터러블이 끝나면 zip()도 종료됩니다.
- 기본 문법
    
    ```python
    zip(*iterables)
    # *iterables: 하나 이상의 이터러블 객체들을 인자로 받습니다.
    
    ```
    
1. 예시: 두 리스트 묶기
    - 가장 기본적인 예시로, 두 개의 리스트를 묶어봅니다.
    
    ```python
    list1 = [1, 2, 3]
    list2 = ['a', 'b', 'c']
    
    zipped_object = zip(list1, list2)
    
    # zip() 객체는 이터레이터이므로, 리스트로 변환하여 내용을 확인합니다.
    zipped_list = list(zipped_object)
    print(zipped_list)
    
    ```
    
    - 출력 결과:
        
        ```
        [(1, 'a'), (2, 'b'), (3, 'c')]
        
        ```
        
    - 설명: 각 리스트의 같은 위치에 있는 요소를 묶어 튜플로 구성된 리스트를 생성합니다.
2. 예시: 길이가 다른 리스트 묶기
    - 길이가 다른 리스트를 묶으면 어떻게 되는지 살펴봅니다.
    
    ```python
    names = ['Alice', 'Bob', 'Charlie']
    ages = [25, 30]
    
    zipped_data = list(zip(names, ages))
    print(zipped_data)
    
    ```
    
    - 출력 결과:
        
        ```
        [('Alice', 25), ('Bob', 30)]
        
        ```
        
    - 설명: ages 리스트의 길이가 더 짧으므로, zip()은 두 번째 요소까지 묶고 종료됩니다.
        
        Charlie는 짝이 없으므로 버려집니다.
        
3. zip() 함수의 활용
    - zip()은 여러 이터러블의 데이터를 동시에 순회하거나, 딕셔너리를 만드는 등 다양한 상황에서 유용하게 쓰입니다.
    1. 여러 리스트를 동시에 순회하기
        
        ```python
        names = ['Alice', 'Bob', 'Charlie']
        scores = [90, 85, 95]
        
        for name, score in zip(names, scores):
            print(f"{name}의 점수는 {score}점입니다.")
        
        ```
        
        - 출력 결과:
            
            ```
            Alice의 점수는 90점입니다.
            Bob의 점수는 85점입니다.
            Charlie의 점수는 95점입니다.
            
            ```
            
        - 설명: zip()을 사용하면 여러 리스트를 동시에 순회하며 요소들을 묶어서 처리할 수 있습니다.
    2. 두 리스트로 딕셔너리 만들기
        
        ```python
        keys = ['name', 'age', 'city']
        values = ['Alice', 25, 'New York']
        
        my_dict = dict(zip(keys, values))
        print(my_dict)
        
        ```
        
        - 출력 결과:
            
            ```
            {'name': 'Alice', 'age': 25, 'city': 'New York'}
            
            ```
            
        - 설명: zip()으로 key와 value 리스트를 묶고, dict()로 감싸 딕셔너리를 생성합니다.
    3. zip(*...)을 이용한 언패킹 (Unpacking)
        
        ```python
        zipped_data = [('Alice', 25), ('Bob', 30), ('Charlie', 35)]
        
        # *zipped_data는 각 튜플을 인자로 풀어줍니다.
        names, ages = zip(*zipped_data)
        
        print(names)
        print(ages)
        
        ```
        
        - 출력 결과:
            
            ```
            ('Alice', 'Bob', 'Charlie')
            (25, 30, 35)
            
            ```
            
        - 설명: zip()은 묶는 기능뿐 아니라 언패킹을 통해 다시 원래 리스트들로 분리하는 기능도 제공합니다.
        

<요약>

- 튜플로다가 반환함
- 가장 짧은 것을 기준으로
- 튜플로 반환해주니까 dict에다가 넣으면 고대로 딕셔너리 만들어줌
- `zip(*…)`로다가 받으면,  언패킹 으로 묶어서 각각의 변수에다가 전달해줌
- 즉, `names, ages = zip(*zipped_data)`
